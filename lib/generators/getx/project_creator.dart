import 'dart:io';
import 'package:murait_cli/generators/getx/templates.dart';
import 'package:path/path.dart' as p;
import 'package:process/process.dart';

class ProjectGenerator {
  // The path inside your CLI tool where the boilerplate 'lib' folder should be located.
  final templateLibPath = 'lib/template_lib';
  final templateAssetsPath = 'lib/assets';
  String? _packageRoot;

  /// Finds the root directory of the installed murait_cli package.
  Future<String?> _findPackageRoot() async {
    if (_packageRoot != null) return _packageRoot;

    // Get the path of the running script.
    var scriptUri = Platform.script;
    var scriptPath = scriptUri.toFilePath(windows: Platform.isWindows);

    var currentDir = Directory(p.dirname(scriptPath));

    // Traverse up the directory tree from the script's location
    // until a pubspec.yaml file is found. This is the package root.
    while (await currentDir.parent.exists()) {
      final pubspecFile = File(p.join(currentDir.path, 'pubspec.yaml'));
      if (await pubspecFile.exists()) {
        _packageRoot = currentDir.path;
        return _packageRoot;
      }
      currentDir = currentDir.parent;
    }

    return null;
  }

  Future<void> createProject(String projectName) async {
    final packageRoot = await _findPackageRoot();
    if (packageRoot == null) {
      print('‚ùå Error: Could not determine the package root directory of the CLI tool.');
      print('‚û°Ô∏è This might happen if the CLI is not installed correctly. Try re-installing it.');
      return;
    }

    // Construct absolute paths to the template directories
    final templateLibPath = p.join(packageRoot, 'lib', 'template_lib');
    final templateAssetsPath = p.join(packageRoot, 'lib',  'assets');

    final projectDir = Directory(projectName);
    if (await projectDir.exists()) {
      print('‚ùå Error: Directory "$projectName" already exists.');
      return;
    }

    final templateLibDir = Directory(templateLibPath);
    if (!await templateLibDir.exists() || templateLibDir.listSync().isEmpty) {
      print('‚ùå Error: Template directory not found or is empty at "$templateLibPath".');
      print('‚û°Ô∏è Please ensure the "lib/template_lib" folder exists in your GitHub repository.');
      return;
    }

    final templateAssetsDir = Directory(templateAssetsPath);
    if (!await templateAssetsDir.exists()) {
      print('‚ö†Ô∏è  Warning: Template assets directory not found at "$templateAssetsPath". An empty assets folder will be created.');
    }

    print('üöÄ Creating a new Flutter project "$projectName"... (This might take a moment)');
    const processManager = LocalProcessManager();
    var result = await processManager.run(['flutter', 'create', projectName]);

    if (result.exitCode != 0) {
      print('‚ùå Error creating Flutter project. See output below:');
      print(result.stdout);
      print(result.stderr);
      return;
    }
    print('‚úÖ Flutter project created successfully.');

    // Delete the default lib folder generated by `flutter create`.
    final defaultLib = Directory('$projectName/lib');
    if (await defaultLib.exists()) {
      print('üóëÔ∏è  Deleting default lib folder...');
      await defaultLib.delete(recursive: true);
    }

    // Copy your custom boilerplate lib folder.
    print('‚ú® Copying boilerplate from "$templateLibPath"...');
    final newLibDir = Directory('$projectName/lib');
    await newLibDir.create();
    await _copyDirectory(templateLibDir, newLibDir);

    if (!await templateAssetsDir.exists() || templateAssetsDir.listSync().isEmpty) {
      print('‚ùå Error: Template directory not found or is empty at "$templateAssetsPath".');
      print('‚û°Ô∏è Please create it and place your boilerplate "lib" folder contents inside.');
      return;
    }

    // Copy your custom boilerplate assets folder.
    print('‚ú® Copying boilerplate from "$templateAssetsPath"...');
    final newAssetsDir = Directory('$projectName/assets');
    await newAssetsDir.create();
    await _copyDirectory(templateAssetsDir, newAssetsDir);
    print('‚úÖ Boilerplate lib folder copied.');
    await Templates.createPubspecFile(projectName);

    print('\nüéâ Success! Project "$projectName" is ready.');
    print('Next steps:');
    print('  cd $projectName');
    print('  flutter pub get');
    print('  flutter run');
  }

  /// Recursively copies a directory.
  Future<void> _copyDirectory(Directory source, Directory destination) async {
    await for (var entity in source.list(recursive: false)) {
      if (entity is Directory) {
        final newDirectory = Directory('${destination.path}/${entity.path.split(Platform.pathSeparator).last}');
        await newDirectory.create();
        await _copyDirectory(entity, newDirectory);
      } else if (entity is File) {
        await entity.copy('${destination.path}/${entity.path.split(Platform.pathSeparator).last}');
      }
    }
  }
}
