import 'dart:io';
import 'package:murait_cli/generators/getx/templates.dart';
import 'package:process/process.dart';

class ProjectGenerator {
  // The path inside your CLI tool where the boilerplate 'lib' folder should be located.
  final templateLibPath = 'lib/template_lib';
  final templateAssetsPath = 'lib/assets';

  Future<void> createProject(String projectName) async {
    final projectDir = Directory(projectName);
    if (await projectDir.exists()) {
      print('‚ùå Error: Directory "$projectName" already exists.');
      return;
    }

    final templateDir = Directory(templateLibPath);
    if (!await templateDir.exists() || templateDir.listSync().isEmpty) {
      print('‚ùå Error: Template directory not found or is empty at "$templateLibPath".');
      print('‚û°Ô∏è Please create it and place your boilerplate "lib" folder contents inside.');
      return;
    }

    print('üöÄ Creating a new Flutter project "$projectName"... (This might take a moment)');
    const processManager = LocalProcessManager();
    var result = await processManager.run(['flutter', 'create', projectName]);

    if (result.exitCode != 0) {
      print('‚ùå Error creating Flutter project. See output below:');
      print(result.stdout);
      print(result.stderr);
      return;
    }
    print('‚úÖ Flutter project created successfully.');

    // Delete the default lib folder generated by `flutter create`.
    final defaultLib = Directory('$projectName/lib');
    if (await defaultLib.exists()) {
      print('üóëÔ∏è  Deleting default lib folder...');
      await defaultLib.delete(recursive: true);
    }

    // Copy your custom boilerplate lib folder.
    print('‚ú® Copying boilerplate from "$templateLibPath"...');
    final newLibDir = Directory('$projectName/lib');
    await newLibDir.create();
    await _copyDirectory(templateDir, newLibDir);

    final templateAssetsDir = Directory(templateAssetsPath);
    if (!await templateAssetsDir.exists() || templateAssetsDir.listSync().isEmpty) {
      print('‚ùå Error: Template directory not found or is empty at "$templateAssetsPath".');
      print('‚û°Ô∏è Please create it and place your boilerplate "lib" folder contents inside.');
      return;
    }

    // Copy your custom boilerplate assets folder.
    print('‚ú® Copying boilerplate from "$templateAssetsPath"...');
    final newAssetsDir = Directory('$projectName/assets');
    await newAssetsDir.create();
    await _copyDirectory(templateAssetsDir, newAssetsDir);
    print('‚úÖ Boilerplate lib folder copied.');
    await Templates.createPubspecFile(projectName);

    print('\nüéâ Success! Project "$projectName" is ready.');
    print('Next steps:');
    print('  cd $projectName');
    print('  flutter pub get');
    print('  flutter run');
  }

  /// Recursively copies a directory.
  Future<void> _copyDirectory(Directory source, Directory destination) async {
    await for (var entity in source.list(recursive: false)) {
      if (entity is Directory) {
        final newDirectory = Directory('${destination.path}/${entity.path.split(Platform.pathSeparator).last}');
        await newDirectory.create();
        await _copyDirectory(entity, newDirectory);
      } else if (entity is File) {
        await entity.copy('${destination.path}/${entity.path.split(Platform.pathSeparator).last}');
      }
    }
  }
}
